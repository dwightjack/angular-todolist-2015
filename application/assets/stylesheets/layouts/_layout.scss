/* =============================================================================

   Layout
   ====

   ========================================================================== */

/* ==========================================================================
   ##Base Layouts
   ========================================================================== */

.l-wrapper {
    @extend %clearfix;
    position: relative;
}

.l-container {
    @extend %clearfix;
    margin-right: auto;
    margin-left: auto;

    @if $grid-enabled {
        padding-right: $grid-gutter-width / 2;
        padding-left: $grid-gutter-width / 2;
        @if $grid-fluid-breakpoints {
            //fluid layout till max width
            max-width: $container-lg;
        } @else {
            //no need for breakpoint fallbacks, since it's explicitly set below!
            @include mq(sm) {
                width: $container-sm;
            }

            @include mq(md) {
                width: $container-md;
            }

            @include mq(lg) {
                width: 100%;
                max-width: $container-lg;
            }
        }
        @include jacket(ie8) {
            width: $container-lg;
        }
    }
}

/* Responsive Grid System

   Adapted from [Twitter Bootstrap 3](https://github.com/twbs/bootstrap-sass/blob/master/vendor/assets/stylesheets/bootstrap/_grid.scss)
   ========================================================================== */

@if $grid-enabled {
    @-ms-viewport {
        width: device-width;
    }

    .l-row {
        @extend %clearfix;
        margin-right: $grid-gutter-width / -2;
        margin-left: $grid-gutter-width / -2;
    }
    @include make-grid-columns;
    // Extra small grid
    //
    // Columns, offsets, pushes, and pulls for extra small devices like
    // smartphones.
    @include make-grid-columns-float(xs);
    @include make-grid($grid-columns, xs, width);
    @include make-grid($grid-columns, xs, pull);
    @include make-grid($grid-columns, xs, push);
    @include make-grid($grid-columns, xs, offset);
    // Small grid
    //
    // Columns, offsets, pushes, and pulls for the small device range, from phones
    // to tablets.
    @include mq(sm) {
        @include make-grid-columns-float(sm);
        @include make-grid($grid-columns, sm, width);
        @include make-grid($grid-columns, sm, pull);
        @include make-grid($grid-columns, sm, push);
        @include make-grid($grid-columns, sm, offset);
    }

    // Medium grid
    //
    // Columns, offsets, pushes, and pulls for the desktop device range.
    @include mq(md) {
        @include make-grid-columns-float(md);
        @include make-grid($grid-columns, md, width);
        @include make-grid($grid-columns, md, pull);
        @include make-grid($grid-columns, md, push);
        @include make-grid($grid-columns, md, offset);
    }

    // Large grid
    //
    // Columns, offsets, pushes, and pulls for the large desktop device range.
    @include mq(lg) {
        @include make-grid-columns-float(lg);
        @include make-grid($grid-columns, lg, width);
        @include make-grid($grid-columns, lg, pull);
        @include make-grid($grid-columns, lg, push);
        @include make-grid($grid-columns, lg, offset);
    }
}

/* MQ Relative Visibility
   ========================================================================== */
@if $grid-enabled {
    @include mq(xs) {
        .l-hidden--from-xs {
            display: none !important;
        }
    }

    @include mq(sm) {
        .l-hidden--from-sm {
            display: none !important;
        }
    }

    @include mq(md) {
        .l-hidden--from-md {
            display: none !important;
        }
    }

    @include mq(lg) {
        .l-hidden--from-lg {
            display: none !important;
        }
    }

    @include mq($until: xs) {
        .l-hidden--until-xs {
            display: none !important;
        }
    }

    @include mq($until: sm) {
        .l-hidden--until-sm {
            display: none !important;
        }
    }

    @include mq($until: md) {
        .l-hidden--until-md {
            display: none !important;
        }
    }

    @include mq($until: lg) {
        .l-hidden--until-lg {
            display: none !important;
        }
    }
}

/* CSS to JS Breakpoint Bridge
   =========================================================================== */

@if $mq-responsive {

    head {
        font-family: '/#{map-to-JSON($mq-breakpoints)}/';
    }

//    @each $mq-breakpoint-key, $mq-breakpoint-value in $mq-breakpoints {
//        title {
//            font-family: '/#{map-get($mq-list, $mq-breakpoint-value)}/';
//        }
//    }




}
/* Shared Layout Styles
 * ========================================================================== */



body {
    margin-top: 20px;
    min-width: 320px;
}

[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
    display: none !important;
}

.container {
    max-width: 730px;
}


.caret-reverse {
    transform: rotate(180deg);
}

.action-bar	{
    background-color: rgba(0,0,0,0.1);
    position: absolute;
    top: 0;
    right: 0;
    z-index: 2;
    padding: 5px 15px;
    font-size: 0.8em;

    > a {
        color: black;
        text-decoration: none;
        opacity: 0.7;

        &:hover {
            opacity: 1;
        }
    }

    .no-touch & {
        display: none;
    }

    .list-group-item:hover & {
        display: block;
    }

}
.list-group-item-heading {
    margin-bottom: 0;
    cursor: pointer;
}


#todolist-items {
    .checkbox {
        margin-top: 0;
        margin-bottom: 0;
    }
}


.todo-completed {

    opacity: 0.5;

    .list-group-item-heading {
        text-decoration: line-through;
    }
}

.progress-bar[aria-valuenow="0"] {
    color: $color-text;
}

.glyphicon-refresh-animate {
    animation: spin .7s infinite linear;
}

@keyframes spin2 {
    from { transform: rotate(0deg);}
    to { transform: rotate(360deg);}
}